1) Explain the steps to deleting a node from the middle of a singly-linked list. No need to code, just pseudo-code or bullet points will work.
    
    for( node in the linked list; node is not null; node = node.next )
        if( node.next == node to be deleted )
            temp pointer = node to be deleted
            node.next = temp.next
            delete node at temp
            break loop

2) Explain the steps to deleting a node from the end of a doubly-linked list (either head or tail). No need to code, just pseudo-code or bullet points will work.

    temp pointer = head
    head = temp.next
    head.prev = temp.prev
    delete node at temp

3) Why would a tree be more useful than a list? Give an example of a circumstance in which a tree is better in some way.

    Trees can be more useful than a list because they allow for each node to be connected to multiple children and parent nodes as opposed to just one of each in a list. A tree would be better suited for organizing a heirarchy of nodes, and searches if the tree is properly structured. One example of this could be used for the alphebetically sorted list of quarterbacks from this weeks lab. If the parent node was set to be the median value of the alphabetical children, the more effienct binary search could be implemented. In this example, finding what would be the last item in the linked list would require every node to be traversed. By instead creating a tree, less than half of the nodes must be traversed in the worst case.
    
       Brady; Brees; Dilfer; Flacco; Johnson; Manning, E; Manning, P; Rodger; Roethlisberger; Warner; Wilson

                    Manning, E
                     /       \
                 Dilfer     Roethlisberger
                  /   \           /      \
              Brees   Flacco   Rodger    Warner
               |         |        |          |
              Brady   Johnson  Manning, P   Wilson





